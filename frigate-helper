#!/bin/bash

# Überprüfen, ob whiptail installiert ist
if ! command -v whiptail &> /dev/null; then
    echo "whiptail wird benötigt. Installiere es..."
    apt update && apt install -y whiptail
fi

# Schritt 1: Debian-Template automatisch finden
TEMPLATES=($(ls /var/lib/vz/template/cache/debian-*-standard_*.tar.zst 2>/dev/null))
if [ ${#TEMPLATES[@]} -eq 0 ]; then
    echo "Kein Debian-Template gefunden. Bitte zuerst ein Template in /var/lib/vz/template/cache/ ablegen."
    exit 1
fi

# Template-Auswahl
TEMPLATE=$(whiptail --title "Debian Template auswählen" --menu "Wähle ein Template für den Container:" 15 60 4 \
$(for t in "${TEMPLATES[@]}"; do echo "$t $(basename $t)"; done) \
3>&1 1>&2 2>&3)

# Schritt 2: Storage auswählen
STORAGES=($(pvesm status | awk 'NR>1 {print $1}'))
STORAGE=$(whiptail --title "Storage auswählen" --menu "Wähle einen Storage für den Container:" 15 60 4 \
$(for s in "${STORAGES[@]}"; do echo "$s $s"; done) \
3>&1 1>&2 2>&3)

# Schritt 3: CTID festlegen
CTID=$(whiptail --title "Container ID" --inputbox "Gib die CTID für den neuen Container ein:" 8 40 "112" 3>&1 1>&2 2>&3)

# Schritt 4: IP-Modus auswählen
IP_MODE=$(whiptail --title "Netzwerk Modus" --menu "Wähle IP-Konfiguration:" 15 60 4 \
"dhcp" "DHCP" \
"static" "Feste IP" \
3>&1 1>&2 2>&3)

if [ "$IP_MODE" == "static" ]; then
    IP=$(whiptail --title "Feste IP" --inputbox "Gib die feste IP-Adresse für den Container ein:" 8 40 "192.168.1.100/24" 3>&1 1>&2 2>&3)
    GATEWAY=$(whiptail --title "Gateway" --inputbox "Gib das Gateway ein:" 8 40 "192.168.1.1" 3>&1 1>&2 2>&3)
fi

# Schritt 5: SSH-Passwort für Container abfragen
SSH_PASSWORD=$(whiptail --title "SSH Passwort" --passwordbox "Gib ein SSH Passwort für den Container ein:" 8 40 3>&1 1>&2 2>&3)

# Schritt 6: LXC Container erstellen
echo "Erstelle LXC Container..."
if [ "$IP_MODE" == "dhcp" ]; then
    pct create $CTID $TEMPLATE --storage $STORAGE --net0 name=eth0,bridge=vmbr0,ip=dhcp --ostype debian --hostname frigate-$CTID --features nesting=1 --password "$SSH_PASSWORD"
else
    pct create $CTID $TEMPLATE --storage $STORAGE --net0 name=eth0,bridge=vmbr0,ip=$IP,gw=$GATEWAY --ostype debian --hostname frigate-$CTID --features nesting=1 --password "$SSH_PASSWORD"
fi

# Schritt 7: Container starten
pct start $CTID

# Schritt 8: Locale im Container setzen (verhindert Warnungen)
pct exec $CTID -- bash -c "apt update && apt install -y locales && locale-gen en_US.UTF-8 && update-locale LANG=en_US.UTF-8"

# Schritt 9: Frigate auf Host klonen
echo "Klonen Frigate-Repository auf Host..."
mkdir -p /opt
rm -rf /opt/frigate
git clone https://github.com/sebrosch/frigate.git /opt/frigate --branch main

# Schritt 10: Frigate in Container kopieren
pct push /opt/frigate $CTID:/opt/frigate --recursive

# Schritt 11: Docker und Frigate im Container installieren
echo "Installiere Docker im Container..."
pct exec $CTID -- bash -c "apt update && apt install -y curl gnupg lsb-release && curl -fsSL https://get.docker.com | sh"

echo "Starte Frigate im Container..."
pct exec $CTID -- bash -c "cd /opt/frigate && docker-compose up -d"

echo "Frigate läuft jetzt im Container $CTID."
echo "Zugriff: http://<IP>:5000"
